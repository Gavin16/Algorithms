package leetcode.oneMoreHundred;

import java.util.List;

/**
 * @Date: 2020年9月5日
 * ==============================================================================
 * 287. 寻找重复数
 * ==============================================================================
 * 给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。
 *
 * 示例 1:
 *
 * 输入: [1,3,4,2,2]
 * 输出: 2
 * 示例 2:
 *
 * 输入: [3,1,3,4,2]
 * 输出: 3
 * 说明：
 *
 * 不能更改原数组（假设数组是只读的）。
 * 只能使用额外的 O(1) 的空间。
 * 时间复杂度小于 O(n2) 。
 * 数组中只有一个重复的数字，但它可能不止重复出现一次。
 *
 * ==============================================================================
 * 40. 组合总和 II
 * ==============================================================================
 * 给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。
 *
 * candidates 中的每个数字在每个组合中只能使用一次。
 *
 * 说明：
 *
 * 所有数字（包括目标数）都是正整数。
 * 解集不能包含重复的组合。 
 * 示例 1:
 *
 * 输入: candidates = [10,1,2,7,6,1,5], target = 8,
 * 所求解集为:
 * [
 *   [1, 7],
 *   [1, 2, 5],
 *   [2, 6],
 *   [1, 1, 6]
 * ]
 * 示例 2:
 *
 * 输入: candidates = [2,5,2,1,2], target = 5,
 * 所求解集为:
 * [
 *   [1,2,2],
 *   [5]
 * ]
 *
 */
public class Day021 {

    public static void main(String[] args) {
        int[] test1 = {1,3,4,2,2};
        int[] test2 = {3,1,3,4,2};

        System.out.println(new Day021().findDuplicate(test2));
    }




    /**
     * @Title: 287. 寻找重复数
     * @Version: 二分查找实现
     * 二分查找需要在有序数组中查找，这里题目要求不能更改原数组的内容(原数组只读)，显然不能简单的查找输入数组了
     *
     * 题中提到的只有一个元素重复，考虑对 取值小于等于 i(i在[1,n] 范围内取值) 的元素个数，以输入[3,1,3,4,2] 为例
     * 元素 i     1       2       3       4
     * <=i 个数   1       2       4       5
     *
     * 记cnt[i] 为数组中小于等于元素 i 的元素个数，可以看到
     * (1)若 [1,i] 的范围内的元素没有缺失时且重复元素也不在[1,i]范围内时 cnt[i] == i
     * (2)若 重复元素在[1,i] 的范围内时, cnt[i] > i；这里可以从剩余元素来考虑, 剩余元素在[i+1,n] 的范围内取值且不能重复
     *       所以剩余元素最多只能有 n-i个 从而推出 cnt[i] = n+1 - cnt[i] <= n-i ,进一步有 cnt[i] >= i+1
     * (3) 若重复元素不在 [1,i] 范围内时，cnt[i] <= i
     *
     * 以上列出了重复元素落在元素i 左右两边区间的所有情况， 可以看到当且仅当重复元素落在区间[1,i]范围内时， cnt[i] > i
     *
     * 因此可以在发现某个区间范围内有重复元素时用二分查找的方式缩小范围,并在遇到cnt[i] < i 时记录i的值,最后当二分查找的区间缩小为1(l = r) 时结束查找,
     * 最后一次出现cnt[i] < i 时的元素 i 就是重复的元素
     *
     * @param nums
     * @return
     */
    public int findDuplicate(int[] nums) {
        int len = nums.length;
        int l = 0 , r = len - 1, mid , ans = 0;

        while(l <= r){
            mid = l + ((r-l) >>> 1);
            int cnt = 0;
            for(int i = 0 ; i < len ; i++){
                if(nums[i] <= mid){
                    cnt++;
                }
            }
            if(cnt <= mid){
                l = mid + 1;
            }else{
                r = mid - 1;
                ans = mid;
            }
        }
        return ans;
    }


    /**
     * @Title: 287. 寻找重复数
     * @Version: 快慢指针实现
     * @param candidates
     * @param target
     * @return
     */
    public  List<List<Integer>> combinationSum2(int[] candidates, int target) {
        return null;
    }
}
